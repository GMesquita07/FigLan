// Ficheiro: Java.stg
// Grupo de templates para gerar código Java a partir de Figlan.

program(imports, statements) ::= <<
package figlan.generated;

import figures.*;
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;

public class FiglanProgram {
    private static final FigureBoard board = FigureBoard.init("Figlan Output", 800, 600);
    // CORREÇÃO 1: Mover o scanner para um campo estático.
    private static final Scanner scanner = new Scanner(System.in);

    // CORREÇÃO 2: Adicionar a função auxiliar (helper).
    public static String readHelper(String prompt) {
        System.out.print(prompt);
        return scanner.nextLine();
    }

    public static void main(String[] args) {
        // O scanner já não é declarado aqui.
        <statements; separator="\n">
    }
}
>>

// Template para declaração de variáveis
varDecl(type, name, value) ::= "<type> <name> = <value>;"

// Template para uma atribuição simples 
assign(var, op, expr) ::= "<var> <op> <expr>;"

// Template para a instrução 'show'
show(figureVar) ::= "board.draw(<figureVar>);"
hide(figureVar) ::= "board.erase(<figureVar>);"
hideAll() ::= "board.eraseAll();"

showList(listVar) ::= <<
for (Figure fig : <listVar>) {
    board.draw(fig);
}
>>

hideList(listVar) ::= <<
for (Figure fig : <listVar>) {
    board.erase(fig);
}
>>

// Template para a instrução 'pause' 
pause(ms) ::= "Utils.pause(<ms>);"

// Template para a instrução 'print'
print(args) ::= "System.out.print(<args>);"

// Template para a instrução 'println'
println(args) ::= "System.out.println(<args>);"

// Template para a instrução 'for'
forLoop(var, start, end, statements) ::= <<
for (<var> = <start>; <var> \<= <end>; <var>++) {
    <statements; separator="\n">
}
>>

forLoopWithDecl(type, var, start, end, statements) ::= <<
for (<type> <var> = <start>; <var> \<= <end>; <var>++) {
    <statements; separator="\n">
}
>>

// Template para encapsular o resultado de uma expressão em modo TAC
// expr(preamble, result) ::= ""

binaryOp(left, op, right) ::= "(<left> <op> <right>)"

addToList(listVar, element) ::= "<listVar>.add(<element>);"